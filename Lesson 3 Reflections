What happens when you initialize a repository? Why do you need to do it?

The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area is different because is working directory. Changes have to go through the staging area before they go to the repository

How can you use the staging area to make sure you have one commit per logical
Change?
You can use git diff --staged to see the differences between your commit and the staging area. You can also check your staging area before you do git commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
 Branches are useful when you want to make two versions of your game. For example an easy and a hard. They help because they make it very easy to edit both branches and fix any changes that emerge.

How do the diagrams help you visualize the branch structure?
The diagrams helped me understand that there is a possibility to lose commits if you do not save them correctly. Also I now know how the list of commits works.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

By merging two lines together you are adding both of the branches improvement to one game. The diagram shows exactly how git is structured giving us the most accurate representation.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
If it were to always merge automatically there could be changes to your code that you do not want but by doing it manually you are in full control of all changes
